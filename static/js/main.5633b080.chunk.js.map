{"version":3,"sources":["components/headerStyles.module.css","components/refreshStyles.module.css","components/header.jsx","api/fetchVideos.js","context/image_context.js","components/image.jsx","components/refreshButton.jsx","App.js","serviceWorker.js","index.js","components/imageStyles.module.css"],"names":["module","exports","Header","container","headerStyles","className","url","process","fetchData","a","axios","get","data","catImageUrl","window","alert","ImageContext","createContext","ContextProvider","children","useState","response","setResponse","useEffect","result","Provider","value","Video","useContext","imageStyles","img","src","alt","RefreshButton","buttons","refreshStyles","btnColor","icon","button","onClick","location","reload","cx","App","style","display","alignItems","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,UAAY,kC,gGCA9BD,EAAOC,QAAU,CAAC,OAAS,8BAA8B,SAAW,gCAAgC,KAAO,8B,2GCO5FC,MALf,WAAmB,IACTC,EAAcC,IAAdD,UACR,OAAO,wBAAIE,UAAWF,GAAf,kB,+CCHHG,EAAG,yDAAqDC,uCAArD,mBAEIC,EAAS,uCAAG,gCAAAC,EAAA,+EAEEC,IAAMC,IAAIL,GAFZ,uBAEbM,EAFa,EAEbA,KACFC,EAAcD,EAAK,GAAGN,IAHP,kBAIdO,GAJc,gCAMrBC,OAAOC,MAAM,kCANQ,yDAAH,qDCDTC,EAAeC,0BAgBbC,EAdS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACRC,mBAAS,IADD,mBACjCC,EADiC,KACvBC,EADuB,KASxC,OAPAC,qBAAU,WACR,sBAAC,4BAAAd,EAAA,sEACsBD,IADtB,OACOgB,EADP,OAECF,EAAYE,GAFb,0CAAD,KAIC,IAGD,kBAACR,EAAaS,SAAd,CAAuBC,MAAO,CAACL,IAAYF,I,gBCChCQ,MAZf,WAAkB,IAAD,EACIC,qBAAWZ,GAAvBK,EADQ,oBAEPlB,EAAmB0B,IAAnB1B,UAAW2B,EAAQD,IAARC,IACnB,OACE,6BACE,yBAAKzB,UAAWF,GACd,yBAAKE,UAAWyB,EAAKC,IAAKV,EAAUW,IAAI,Q,iCCYjCC,MAlBf,WAA0B,IAChBC,EAAoCC,IAApCD,QAASE,EAA2BD,IAA3BC,SAAUC,EAAiBF,IAAjBE,KAAMC,EAAWH,IAAXG,OAKjC,OACE,yBAAKjC,UAAW6B,GACd,4BAAQK,QANQ,WAClBzB,OAAO0B,SAASC,UAKgBpC,UAAWqC,IAAGN,EAAUE,IACpD,yBACEjC,UAAWgC,EACXN,IAAI,+DCGCY,EAZH,WACV,OACE,yBAAKtC,UAAU,OACb,yBAAKuC,MAAO,CAAEC,QAAS,OAAQC,WAAY,WACzC,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCDcC,QACW,cAA7BjC,OAAO0B,SAASQ,UAEe,UAA7BlC,OAAO0B,SAASQ,UAEhBlC,OAAO0B,SAASQ,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BhE,EAAOC,QAAU,CAAC,UAAY,+BAA+B,IAAM,4B","file":"static/js/main.5633b080.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"headerStyles_container__10mTU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"refreshStyles_button__1pqjy\",\"btnColor\":\"refreshStyles_btnColor__3SnNx\",\"icon\":\"refreshStyles_icon__1k4p-\"};","import React from \"react\";\nimport headerStyles from \"./headerStyles.module.css\";\n\nfunction Header() {\n  const { container } = headerStyles;\n  return <h1 className={container}>Cats in space</h1>;\n}\n\nexport default Header;\n","import axios from \"axios\";\n\nconst url = `https://api.thecatapi.com/v1/images/search?key=${process.env.REACT_APP_API_KEY}&category_ids=2`;\n\nexport const fetchData = async () => {\n  try {\n    const { data } = await axios.get(url);\n    const catImageUrl = data[0].url;\n    return catImageUrl;\n  } catch (error) {\n    window.alert(\"Error:  Failed to fetch images\");\n  }\n};\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { fetchData } from \"../api/fetchVideos\";\n\nexport const ImageContext = createContext();\n\nconst ContextProvider = ({ children }) => {\n  const [response, setResponse] = useState(\"\");\n  useEffect(() => {\n    (async () => {\n      const result = await fetchData();\n      setResponse(result);\n    })();\n  }, []);\n\n  return (\n    <ImageContext.Provider value={[response]}>{children}</ImageContext.Provider>\n  );\n};\n\nexport default ContextProvider;\n","import React, { useContext } from \"react\";\nimport { ImageContext } from \"../context/image_context\";\nimport imageStyles from \"./imageStyles.module.css\";\n\nfunction Video() {\n  const [response] = useContext(ImageContext);\n  const { container, img } = imageStyles;\n  return (\n    <div>\n      <div className={container}>\n        <img className={img} src={response} alt=\"\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Video;\n","import React from \"react\";\nimport refreshStyles from \"./refreshStyles.module.css\";\nimport cx from \"classnames\";\n\nfunction RefreshButton() {\n  const { buttons, btnColor, icon, button } = refreshStyles;\n  const refreshPage = () => {\n    window.location.reload();\n  };\n\n  return (\n    <div className={buttons}>\n      <button onClick={refreshPage} className={cx(btnColor, button)}>\n        <img\n          className={icon}\n          src=\"https://htmlacademy.ru/assets/icons/reload-6x-white.png\"\n        />\n      </button>\n    </div>\n  );\n}\n\nexport default RefreshButton;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header\";\nimport Image from \"./components/image\";\nimport RefreshButton from \"./components/refreshButton\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Header />\n        <RefreshButton />\n      </div>\n      <Image />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ImageProvider from \"./context/image_context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ImageProvider>\n      <App />\n    </ImageProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"imageStyles_container__1OlfF\",\"img\":\"imageStyles_img__3l8ES\"};"],"sourceRoot":""}